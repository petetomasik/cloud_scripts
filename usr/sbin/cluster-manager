#!/usr/bin/env python

import sys, getopt, requests, json, psutil, yaml, subprocess
import logging
import logging.handlers
from datetime import datetime, timedelta

log = logging.getLogger('MyLogger')
log.setLevel(logging.DEBUG)

handler = logging.handlers.SysLogHandler(address = '/dev/log')
log.addHandler(handler)

with open("/etc/_config.yaml", 'r') as yamlfile:
    cfg = yaml.load(yamlfile)

base_url = 'https://api.vultr.com'
headers = {"API-Key": ("%s" % cfg["vultr"]["api_key"])}

DEV_MODE = True
MAX_INSTANCES = 5

instance_names = cfg["vultr"]["instance_names"]

launch_params = {
        'DCID': cfg["vultr"]["launch_params"]["DCID"],
        'VPSPLANID': cfg["vultr"]["launch_params"]["VPSPLANID"],
        'OSID': cfg["vultr"]["launch_params"]["OSID"],
        'SCRIPTID': cfg["vultr"]["launch_params"]["SCRIPTID"],
        'NETWORKID': cfg["vultr"]["launch_params"]["NETWORKID"],
        'SSHKEYID': cfg["vultr"]["launch_params"]["SSHKEYID"],
        'FIREWALLGROUPID': cfg["vultr"]["launch_params"]["FIREWALLGROUPID"],
        'tag': cfg["vultr"]["launch_params"]["tag"]
        }

destroy_params = {}

def get_transcodes():
    local_count = 0
    remote_count = 0

    for proc in psutil.process_iter():
        try:
            if proc.name() == "plex_transcoder":
                local_count += 1
            if proc.name() == "ssh" and 'PLEX_MEDIA_SERVER' in ' '.join(proc.cmdline()) and 'plex@127.0.0.1' not in ' '.join(proc.cmdline()):
                remote_count += 1
        except psutil.NoSuchProcess:
            pass

    return local_count, remote_count


def get_instance_list(search_params = None):
    url = base_url+"/v1/server/list"
    if search_params:
        url += "?%s" % search_params
    instance_list = requests.get(url,headers=headers)
    return instance_list.json()


def create_instance(launch_params):
    log.info("VPS creation params: %s" % launch_params)

    server_list = get_instance_list(("tag=%s" % launch_params["tag"]))
    if len(server_list) >= MAX_INSTANCES:
        log.critical("WARNING: %d VPS slaves detected!!! Max limit of 5!!!" % slaves_running)
        exit(1)

    if not DEV_MODE:
        response = requests.post(base_url+"/v1/server/create",headers=headers,data=launch_params)
        if response.status_code == requests.codes.ok:
            launched_instance = True
            launched_instance_name = launch_params["hostname"]
            log.info("Launched: %s" % launched_instance_name)
            log.info("Response: %s" % response.text)
    else:
        log.info("[noop] Launched: %s" % name)


def destroy_instance(vps_obj):
    destroy_params["SUBID"] = vps_obj["SUBID"]

    time_fmt = '%Y-%m-%d %H:%M:%S'
    created_minute = datetime.strptime(vps_obj["date_created"], time_fmt).minute
    time_now = datetime.strftime(datetime.now(), time_fmt)
    time_now = datetime.strptime(time_now, time_fmt)
    log.debug("created_minute: %d" % created_minute)
    this_hour_expiry = time_now.replace(minute=created_minute)
    time_until_this_hour_expiry = this_hour_expiry-time_now
    if time_until_this_hour_expiry.days < 0:
        time_until_this_hour_expiry = timedelta(days=0, seconds=time_until_this_hour_expiry.seconds, microseconds=time_until_this_hour_expiry.microseconds)
    seconds_until_this_hour_expiry = time_until_this_hour_expiry.seconds
    log.debug("Seconds until expiry: %s" % seconds_until_this_hour_expiry)

    if seconds_until_this_hour_expiry <= 300:
        # expiration in the next 5 minutes
        log.debug("Expiration in the NEXT 5 MINUTES...")
        if not DEV_MODE:
            proc = subprocess.Popen(["consul", "force-leave", vps_obj["label"]], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            proc.wait()
            response = requests.post(base_url+"/v1/server/destroy",headers=headers,data=destroy_params)
            if response.status_code == requests.codes.ok:
                log.info("INSTANCE DESTROYED: %s (%s)" % (vps_obj["label"],vps_obj["SUBID"]))
            else:
                log.error("Unable to destroy instance: %s (%s)" % (vps_obj["label"],vps_obj["SUBID"]))
                log.error("REASON: %s - %s" % (response.status_code,response.text))
        else:
            log.info("[noop] INSTANCE DESTROYED: %s (%s)" % (vps_obj["label"],vps_obj["SUBID"]))
    else:
        # expiration in more than 5 minutes
        log.debug("Instance not close to expiry, skipping destroy")


def cluster_manager():
    log_message = {}
    log_message["dev_mode"] = DEV_MODE

    local_transcodes, remote_transcodes = get_transcodes()
    active_transcodes = local_transcodes+remote_transcodes

    server_list = get_instance_list(("tag=%s" % launch_params["tag"]))
    slaves_running = len(server_list)

    log_message["local_transcodes"] = local_transcodes
    log_message["remote_transcodes"] = remote_transcodes
    log_message["vps_instances"] = slaves_running
    log_message["transcode_slots_available"] = ((slaves_running+1)-active_transcodes)

    launched_instance = False
    destroyed_instance = False
    if active_transcodes > slaves_running:
        log_message["cluster_action"] = "create"
        log.debug("Need to spin up instance, %d/%d transcode slots in use" % (active_transcodes,slaves_running+1))
        for name in instance_names:
            server_list = get_instance_list(("label=%s" % name))
            if not server_list:
                launch_params["hostname"] = name
                launch_params["label"] = name

                create_instance(launch_params)
                break

    elif (slaves_running-active_transcodes) >= 1:
        log_message["cluster_action"] = "destroy"
        log.debug("Need to destroy %d instances, %d/%d transcode slots in use" % (slaves_running-active_transcodes,active_transcodes,slaves_running+1))
        server_list = get_instance_list(("tag=%s" % launch_params["tag"]))
        for subid in server_list:
            vps = server_list[subid]
            log.debug("vps object: %s" % vps)
            slave_running_transcode = False
            for proc in psutil.process_iter():
                try:
                    if proc.name() == "ssh" and ("%s@%s" % ("plex",vps["internal_ip"])) in ' '.join(proc.cmdline()) and 'PLEX_MEDIA_SERVER' in ' '.join(proc.cmdline()):
                        log.warning("Slave (%s) found with running transcode, ABORT!!!" % vps["label"])
                        slave_running_transcode = True
                        break
                except psutil.NoSuchProcess:
                    pass

            if not slave_running_transcode:
                destroy_instance(vps)
                break
    else:
        log_message["cluster_action"] = "none"

    log.info(log_message)


def get_cluster_nodes():
    response = requests.get('http://localhost:8500/v1/catalog/service/prt_remote')
    cluster_nodes = response.json()

    print("%s %s %s" % ('127.0.0.1','51322','plex'))
    for node in cluster_nodes:
        print("%s %s %s" % (node["Address"],'51322','plex'))


if __name__ == '__main__':
    if len(sys.argv) > 1:
        if sys.argv[1] == "get_cluster_nodes":
            get_cluster_nodes()

        if sys.argv[1] == "get_instance_list":
            get_instance_list()

        if sys.argv[1] == "noop":
            exit(0)

    else:
        cluster_manager()
        get_cluster_nodes()
